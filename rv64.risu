# Input file for risugen defining RISC-V instructions
.mode riscv.rv64
@RV64I

# x2 stack pointer, x3 global pointer, x4 thread pointer
# These registers should be reserved for signal handler.

LUI RISCV imm:20 rd:5 0110111 \
!constraints { greg($rd); }

AUIPC RISCV imm:20 rd:5 0110111 \
!constraints { greg($rd); }

# Limit to current implementation, the base address register will be overide
LB RISCV imm:12 rs1:5 000 rd:5 0000011 \
!constraints { greg($rd) && gbase($rs1); } \
!memory { align(1); reg_plus_imm($rs1, sextract($imm, 12), $rd); }

LH RISCV imm:12 rs1:5 001 rd:5 0000011 \
!constraints { greg($rd) && gbase($rs1); } \
!memory { align(2); reg_plus_imm($rs1, sextract($imm, 12), $rd); }

LW RISCV imm:12 rs1:5 010 rd:5 0000011 \
!constraints { greg($rd) && gbase($rs1); } \
!memory { align(4); reg_plus_imm($rs1, sextract($imm, 12), $rd); }

LBU RISCV imm:12 rs1:5 100 rd:5 0000011 \
!constraints { greg($rd) && gbase($rs1); } \
!memory { align(1); reg_plus_imm($rs1, sextract($imm, 12), $rd); }

LHU RISCV imm:12 rs1:5 101 rd:5 0000011 \
!constraints { greg($rd) && gbase($rs1); } \
!memory { align(2); reg_plus_imm($rs1, sextract($imm, 12), $rd); }

SB RISCV imm5:7 rs2:5 rs1:5 000 imm:5 0100011 \
!constraints { greg($rs2) && gbase($rs1) && $rs2 != $rs1; } \
!memory { align(1); reg_plus_imm($rs1, sextract($imm5 << 5 | $imm, 12)); }

SH RISCV imm5:7 rs2:5 rs1:5 001 imm:5 0100011 \
!constraints { greg($rs2) && gbase($rs1) && $rs2 != $rs1; } \
!memory { align(2); reg_plus_imm($rs1, sextract($imm5 << 5 | $imm, 12)); }

SW RISCV imm5:7 rs2:5 rs1:5 010 imm:5 0100011 \
!constraints { greg($rs2) && gbase($rs1) && $rs2 != $rs1; } \
!memory { align(4); reg_plus_imm($rs1, sextract($imm5 << 5 | $imm, 12)); }

ADDI RISCV imm:12 rs1:5 000 rd:5 0010011 \
!constraints { greg($rd) && greg($rs1); }

SLTI RISCV imm:12 rs1:5 010 rd:5 0010011 \
!constraints { greg($rd) && greg($rs1); }

SLTIU RISCV imm:12 rs1:5 011 rd:5 0010011 \
!constraints { greg($rd) && greg($rs1); }

XORI RISCV imm:12 rs1:5 100 rd:5 0010011 \
!constraints { greg($rd) && greg($rs1); }

ORI RISCV imm:12 rs1:5 110 rd:5 0010011 \
!constraints { greg($rd) && greg($rs1); }

ANDI RISCV imm:12 rs1:5 111 rd:5 0010011 \
!constraints { greg($rd) && greg($rs1); }

ADD RISCV 0000000 rs2:5 rs1:5 000 rd:5 0110011 \
!constraints { greg($rd) && greg($rs1) && greg($rs2); }

SUB RISCV 0100000 rs2:5 rs1:5 000 rd:5 0110011 \
!constraints { greg($rd) && greg($rs1) && greg($rs2); }

SLL RISCV 0000000 rs2:5 rs1:5 001 rd:5 0110011 \
!constraints { greg($rd) && greg($rs1) && greg($rs2); }

SLT RISCV 0000000 rs2:5 rs1:5 010 rd:5 0110011 \
!constraints { greg($rd) && greg($rs1) && greg($rs2); }

SLTU  RISCV 0000000 rs2:5 rs1:5 011 rd:5 0110011 \
!constraints { greg($rd) && greg($rs1) && greg($rs2); }

XOR RISCV 0000000 rs2:5 rs1:5 100 rd:5 0110011 \
!constraints { greg($rd) && greg($rs1) && greg($rs2); }

SRL RISCV 0000000 rs2:5 rs1:5 101 rd:5 0110011 \
!constraints { greg($rd) && greg($rs1) && greg($rs2); }

SRA RISCV 0100000 rs2:5 rs1:5 101 rd:5 0110011 \
!constraints { greg($rd) && greg($rs1) && greg($rs2); }

OR RISCV 0000000 rs2:5 rs1:5 110 rd:5 0110011 \
!constraints { greg($rd) && greg($rs1) && greg($rs2); }

AND RISCV 0000000 rs2:5 rs1:5 111 rd:5 0110011 \
!constraints { greg($rd) && greg($rs1) && greg($rs2); }

LWU RISCV imm:12 rs1:5 110 rd:5 0000011 \
!constraints { greg($rd) && gbase($rs1); } \
!memory { align(4); reg_plus_imm($rs1, sextract($imm, 12), $rd); }

LD RISCV imm:12 rs1:5 011 rd:5 0000011 \
!constraints { greg($rd) && gbase($rs1); } \
!memory { align(8); reg_plus_imm($rs1, sextract($imm, 12), $rd); }

SD RISCV imm5:7 rs2:5 rs1:5 011 imm:5 0100011 \
!constraints { greg($rs2) && gbase($rs1) && $rs2 != $rs1; } \
!memory { align(8); reg_plus_imm($rs1, sextract($imm5 << 5 | $imm, 12)); }

SLLI RISCV 00000 sham5:7 rs1:5 001 rd:5 0010011 \
!constraints { greg($rd) && greg($rs1); }

SRLI RISCV 00000 sham5:7 rs1:5 101 rd:5 0010011 \
!constraints { greg($rd) && greg($rs1); }

SRAI RISCV 01000 sham5:7 rs1:5 101 rd:5 0010011 \
!constraints { greg($rd) && greg($rs1); }

ADDIW RISCV imm:12 rs1:5 000 rd:5 0011011 \
!constraints { greg($rd) && greg($rs1); }

SLLIW RISCV 0000000 shamt:5 rs1:5 001 rd:5 0011011 \
!constraints { greg($rd) && greg($rs1); }

SRLIW RISCV 0000000 shamt:5 rs1:5 101 rd:5 0011011 \
!constraints { greg($rd) && greg($rs1); }

SRAIW RISCV 0100000 shamt:5 rs1:5 101 rd:5 0011011 \
!constraints { greg($rd) && greg($rs1); }

ADDW RISCV 0000000 rs2:5 rs1:5 000 rd:5 0011011 \
!constraints { greg($rd) && greg($rs1) && greg($rs2); }

SUBW RISCV 0100000 rs2:5 rs1:5 000 rd:5 0011011 \
!constraints { greg($rd) && greg($rs1) && greg($rs2); }

SLLW RISCV 0000000 rs2:5 rs1:5 001 rd:5 0011011 \
!constraints { greg($rd) && greg($rs1) && greg($rs2); }

SRLW RISCV 0000000 rs2:5 rs1:5 101 rd:5 0011011 \
!constraints { greg($rd) && greg($rs1) && greg($rs2); }

SRAW RISCV 0100000 rs2:5 rs1:5 101 rd:5 0011011 \
!constraints { greg($rd) && greg($rs1) && greg($rs2); }

@RV64M

MUL RISCV 0000001 rs2:5 rs1:5 000 rd:5 0110011 \
!constraints { greg($rd) && greg($rs1) && greg($rs2); }

MULH RISCV 0000001 rs2:5 rs1:5 001 rd:5 0110011 \
!constraints { greg($rd) && greg($rs1) && greg($rs2); }

MULHSU RISCV 0000001 rs2:5 rs1:5 010 rd:5 0110011 \
!constraints { greg($rd) && greg($rs1) && greg($rs2); }

MULHU RISCV 0000001 rs2:5 rs1:5 011 rd:5 0110011 \
!constraints { greg($rd) && greg($rs1) && greg($rs2); }

DIV RISCV 0000001 rs2:5 rs1:5 100 rd:5 0110011 \
!constraints { greg($rd) && greg($rs1) && greg($rs2); }

DIVU RISCV 0000001 rs2:5 rs1:5 101 rd:5 0110011 \
!constraints { greg($rd) && greg($rs1) && greg($rs2); }

REM RISCV 0000001 rs2:5 rs1:5 110 rd:5 0110011 \
!constraints { greg($rd) && greg($rs1) && greg($rs2); }

REMU RISCV 0000001 rs2:5 rs1:5 111 rd:5 0110011 \
!constraints { greg($rd) && greg($rs1) && greg($rs2); }

MULW RISCV 0000001 rs2:5 rs1:5 000 rd:5 0111011 \
!constraints { greg($rd) && greg($rs1) && greg($rs2); }

DIVW RISCV 0000001 rs2:5 rs1:5 100 rd:5 0111011 \
!constraints { greg($rd) && greg($rs1) && greg($rs2); }

DIVUW RISCV 0000001 rs2:5 rs1:5 101 rd:5 0111011 \
!constraints { greg($rd) && greg($rs1) && greg($rs2); }

REMW RISCV 0000001 rs2:5 rs1:5 110 rd:5 0111011 \
!constraints { greg($rd) && greg($rs1) && greg($rs2); }

REMUW RISCV 0000001 rs2:5 rs1:5 111 rd:5 0111011 \
!constraints { greg($rd) && greg($rs1) && greg($rs2); }

@RV64A

LR_W RISCV 00010 imm:2 00000 rs1:5 010 rd:5 0101111 \
!constraints { greg($rd) && gbase($rs1); } \
!memory { align(4); reg($rs1, $rd); }

SC_W RISCV 00011 imm:2 rs2:5 rs1:5 010 rd:5 0101111 \
!constraints { greg($rd) && greg($rs2) && gbase($rs1) && $rs2 != $rs1; }\
!memory { align(4); reg($rs1, $rd); }

AMOSWAP_W  RISCV 00001 imm:2 rs2:5 rs1:5 010 rd:5 0101111 \
!constraints { greg($rd) && greg($rs2) && gbase($rs1) && $rs2 != $rs1; }\
!memory { align(4); reg($rs1, $rd); }

AMOADD_W   RISCV 00000 imm:2 rs2:5 rs1:5 010 rd:5 0101111 \
!constraints { greg($rd) && greg($rs2) && gbase($rs1) && $rs2 != $rs1; }\
!memory { align(4); reg($rs1, $rd); }

AMOXOR_W   RISCV 00100 imm:2 rs2:5 rs1:5 010 rd:5 0101111 \
!constraints { greg($rd) && greg($rs2) && gbase($rs1) && $rs2 != $rs1; }\
!memory { align(4); reg($rs1, $rd); }

AMOAND_W   RISCV 01100 imm:2 rs2:5 rs1:5 010 rd:5 0101111 \
!constraints { greg($rd) && greg($rs2) && gbase($rs1) && $rs2 != $rs1; }\
!memory { align(4); reg($rs1, $rd); }

AMOOR_W    RISCV 01000 imm:2 rs2:5 rs1:5 010 rd:5 0101111 \
!constraints { greg($rd) && greg($rs2) && gbase($rs1) && $rs2 != $rs1; }\
!memory { align(4); reg($rs1, $rd); }

AMOMIN_W   RISCV 10000 imm:2 rs2:5 rs1:5 010 rd:5 0101111 \
!constraints { greg($rd) && greg($rs2) && gbase($rs1) && $rs2 != $rs1; }\
!memory { align(4); reg($rs1, $rd); }

AMOMAX_W   RISCV 10100 imm:2 rs2:5 rs1:5 010 rd:5 0101111 \
!constraints { greg($rd) && greg($rs2) && gbase($rs1) && $rs2 != $rs1; }\
!memory { align(4); reg($rs1, $rd); }

AMOMINU_W  RISCV 11000 imm:2 rs2:5 rs1:5 010 rd:5 0101111 \
!constraints { greg($rd) && greg($rs2) && gbase($rs1) && $rs2 != $rs1; }\
!memory { align(4); reg($rs1, $rd); }

AMOMAXU_W  RISCV 11100 imm:2 rs2:5 rs1:5 010 rd:5 0101111 \
!constraints { greg($rd) && greg($rs2) && gbase($rs1) && $rs2 != $rs1; }\
!memory { align(4); reg($rs1, $rd); }

LR_D       RISCV 00010 imm:2 00000 rs1:5 011 rd:5 0101111 \
!constraints { greg($rd) && gbase($rs1); } \
!memory { align(8); reg($rs1, $rd); }

SC_D       RISCV 00011 imm:2 rs2:5 rs1:5 011 rd:5 0101111 \
!constraints { greg($rd) && greg($rs2) && gbase($rs1) && $rs2 != $rs1; }\
!memory { align(8); reg($rs1, $rd); }

AMOSWAP_D  RISCV 00001 imm:2 rs2:5 rs1:5 011 rd:5 0101111 \
!constraints { greg($rd) && greg($rs2) && gbase($rs1) && $rs2 != $rs1; }\
!memory { align(8); reg($rs1, $rd); }

AMOADD_D   RISCV 00000 imm:2 rs2:5 rs1:5 011 rd:5 0101111 \
!constraints { greg($rd) && greg($rs2) && gbase($rs1) && $rs2 != $rs1; }\
!memory { align(8); reg($rs1, $rd); }

AMOXOR_D   RISCV 00100 imm:2 rs2:5 rs1:5 011 rd:5 0101111 \
!constraints { greg($rd) && greg($rs2) && gbase($rs1) && $rs2 != $rs1; }\
!memory { align(8); reg($rs1, $rd); }

AMOAND_D   RISCV 01100 imm:2 rs2:5 rs1:5 011 rd:5 0101111 \
!constraints { greg($rd) && greg($rs2) && gbase($rs1) && $rs2 != $rs1; }\
!memory { align(8); reg($rs1, $rd); }

AMOOR_D    RISCV 01000 imm:2 rs2:5 rs1:5 011 rd:5 0101111 \
!constraints { greg($rd) && greg($rs2) && gbase($rs1) && $rs2 != $rs1; }\
!memory { align(8); reg($rs1, $rd); }

AMOMIN_D   RISCV 10000 imm:2 rs2:5 rs1:5 011 rd:5 0101111 \
!constraints { greg($rd) && greg($rs2) && gbase($rs1) && $rs2 != $rs1; }\
!memory { align(8); reg($rs1, $rd); }

AMOMAX_D   RISCV 10100 imm:2 rs2:5 rs1:5 011 rd:5 0101111 \
!constraints { greg($rd) && greg($rs2) && gbase($rs1) && $rs2 != $rs1; }\
!memory { align(8); reg($rs1, $rd); }

AMOMINU_D  RISCV 11000 imm:2 rs2:5 rs1:5 011 rd:5 0101111 \
!constraints { greg($rd) && greg($rs2) && gbase($rs1) && $rs2 != $rs1; }\
!memory { align(8); reg($rs1, $rd); }

AMOMAXU_D  RISCV 11100 imm:2 rs2:5 rs1:5 011 rd:5 0101111 \
!constraints { greg($rd) && greg($rs2) && gbase($rs1) && $rs2 != $rs1; }\
!memory { align(8); reg($rs1, $rd); }
